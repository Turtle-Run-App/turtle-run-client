import Foundation
import HealthKit
import CoreLocation
import UIKit

class HealthKitManager {
    static let shared = HealthKitManager()
    private let healthStore = HKHealthStore()
    
    // Observer query Í¥ÄÎ¶¨Î•º ÏúÑÌïú ÌîÑÎ°úÌçºÌã∞
    private var workoutObserverQuery: HKObserverQuery?
    private var workoutObserverCallback: (() -> Void)?
    
    private init() {}
    
    // HealthKit Í∂åÌïú ÏöîÏ≤≠
    func requestAuthorization(completion: @escaping (Bool, Error?) -> Void) {
        let typesToRead: Set = [
            HKObjectType.workoutType(),
            HKSeriesType.workoutRoute(), // GPS Í≤ΩÎ°ú Îç∞Ïù¥ÌÑ∞Î•º ÏúÑÌïú Í∂åÌïú
            HKQuantityType.quantityType(forIdentifier: .distanceWalkingRunning)!,
            HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned)!,
            HKQuantityType.quantityType(forIdentifier: .heartRate)!,
            HKQuantityType.quantityType(forIdentifier: .stepCount)!,
            HKQuantityType.quantityType(forIdentifier: .runningSpeed)!,
            HKQuantityType.quantityType(forIdentifier: .walkingSpeed)!,
            HKQuantityType.quantityType(forIdentifier: .distanceCycling)!
        ]
        healthStore.requestAuthorization(toShare: [], read: typesToRead, completion: completion)
    }
    
    // MARK: - Observer Pattern for Workout Changes
    
    /// ÏÉàÎ°úÏö¥ ÏõåÌÅ¨ÏïÑÏõÉ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞ÄÎ•º Í∞êÏßÄÌïòÎäî Observer ÏãúÏûë
    func startWorkoutObserver(callback: @escaping () -> Void) {
        print("üéØ HealthKit Observer ÏÑ§Ï†ï ÏãúÏûë...")
        
        // Í∏∞Ï°¥ observerÍ∞Ä ÏûàÎã§Î©¥ Ï†ïÏßÄ
        if workoutObserverQuery != nil {
            stopWorkoutObserver()
        }
        
        // ÏΩúÎ∞± Îì±Î°ù
        self.workoutObserverCallback = callback
        
        // ÏΩúÎ∞± Îì±Î°ù ÌôïÏù∏
        guard workoutObserverCallback != nil else {
            print("‚ùå ÏΩúÎ∞± Ìï®Ïàò Îì±Î°ù Ïã§Ìå®!")
            return
        }
        
        let workoutType = HKObjectType.workoutType()
        workoutObserverQuery = HKObserverQuery(sampleType: workoutType, predicate: nil) { [weak self] query, completionHandler, error in
            let appState = UIApplication.shared.applicationState
            let stateString = appState == .background ? "Î∞±Í∑∏ÎùºÏö¥Îìú" : (appState == .active ? "Ìè¨Í∑∏ÎùºÏö¥Îìú" : "ÎπÑÌôúÏÑ±")
            print("üîî HealthKit Observer Ìä∏Î¶¨Í±∞Îê®!")
            print("   - ÏãúÍ∞Ñ: \(self?.formatKoreanTime(Date()) ?? "Ïïå Ïàò ÏóÜÏùå")")
            print("   - Ïï± ÏÉÅÌÉú: \(stateString)")
            
            if let error = error {
                print("‚ùå HealthKit Observer Ïò§Î•ò: \(error.localizedDescription)")
                completionHandler()
                return
            }
            
            // Î©îÏù∏ Ïì∞Î†àÎìúÏóêÏÑú ÏΩúÎ∞± Ïã§Ìñâ
            DispatchQueue.main.async {
                if let callback = self?.workoutObserverCallback {
                    callback()
                } else {
                    print("‚ùå ÏΩúÎ∞± Ìï®ÏàòÍ∞Ä nilÏûÖÎãàÎã§! WorkoutDataService Ïó∞Í≤∞ Î¨∏Ï†ú")
                }
            }
            
            // HealthKitÏóê Ï≤òÎ¶¨ ÏôÑÎ£åÎ•º ÏïåÎ¶º
            completionHandler()
        }
        
        // Observer ÏãúÏûë
        if let observerQuery = workoutObserverQuery {
            healthStore.execute(observerQuery)
            print("‚úÖ HealthKit Observer Îì±Î°ù ÏôÑÎ£å!")
        } else {
            print("‚ùå Observer Query ÏÉùÏÑ± Ïã§Ìå®!")
            return
        }
        
        // Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÌôúÏÑ±Ìôî
        enableBackgroundDelivery()
    }
    
    /// ÏõåÌÅ¨ÏïÑÏõÉ Observer Ï§ëÏßÄ
    func stopWorkoutObserver() {
        if let observerQuery = workoutObserverQuery {
            healthStore.stop(observerQuery)
            print("üõë HealthKit Observer Ï§ëÏßÄÎê®")
        }
        workoutObserverQuery = nil
        workoutObserverCallback = nil
        
        // Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÎπÑÌôúÏÑ±Ìôî
        disableBackgroundDelivery()
    }
    
    /// Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑúÎèÑ HealthKit Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ Í∞êÏßÄÌï† Ïàò ÏûàÎèÑÎ°ù ÏÑ§Ï†ï
    private func enableBackgroundDelivery() {
        let workoutType = HKObjectType.workoutType()
        
        print("üåô Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÌôúÏÑ±Ìôî ÏãúÎèÑ...")
        
        healthStore.enableBackgroundDelivery(for: workoutType, frequency: .immediate) { success, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("‚ùå Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÌôúÏÑ±Ìôî Ïã§Ìå®: \(error.localizedDescription)")
                } else if success {
                    print("‚úÖ Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÌôúÏÑ±Ìôî ÏÑ±Í≥µ")
                } else {
                    print("‚ö†Ô∏è Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÌôúÏÑ±Ìôî Ïã§Ìå® (Ïù¥Ïú† Î∂àÎ™Ö)")
                }
            }
        }
    }
    
    /// Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÎπÑÌôúÏÑ±Ìôî
    private func disableBackgroundDelivery() {
        let workoutType = HKObjectType.workoutType()
        
        healthStore.disableBackgroundDelivery(for: workoutType) { success, error in
            if let error = error {
                print("‚ùå Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÎπÑÌôúÏÑ±Ìôî Ïã§Ìå®: \(error.localizedDescription)")
            } else if success {
                print("‚úÖ Î∞±Í∑∏ÎùºÏö¥Îìú ÎîúÎ¶¨Î≤ÑÎ¶¨ ÎπÑÌôúÏÑ±Ìôî ÏÑ±Í≥µ")
            }
        }
    }
    
    // ÏµúÍ∑º Îü¨Îãù ÏõåÌÅ¨ÏïÑÏõÉ Í∞ÄÏ†∏Ïò§Í∏∞
    func fetchRecentRunningWorkouts(limit: Int = 10, completion: @escaping ([HKWorkout]) -> Void) {
        let predicate = HKQuery.predicateForWorkouts(with: .running)
        let sortDescriptor = NSSortDescriptor(key: HKSampleSortIdentifierEndDate, ascending: false)
        let query = HKSampleQuery(sampleType: HKObjectType.workoutType(), predicate: predicate, limit: limit, sortDescriptors: [sortDescriptor]) { _, samples, _ in
            let workouts = samples as? [HKWorkout] ?? []
            DispatchQueue.main.async {
                completion(workouts)
            }
        }
        healthStore.execute(query)
    }
    
    // ÌäπÏ†ï Í∏∞Í∞ÑÏùò Îü¨Îãù ÏõåÌÅ¨ÏïÑÏõÉ Í∞ÄÏ†∏Ïò§Í∏∞ (3Í∞úÏõîÏπò)
    func fetchRunningWorkoutsForPeriod(monthsBack: Int = 3, completion: @escaping ([HKWorkout]) -> Void) {
        let calendar = Calendar.current
        let endDate = Date()
        let startDate = calendar.date(byAdding: .month, value: -monthsBack, to: endDate) ?? endDate
        
        print("üìÖ Fetching workouts from \(startDate) to \(endDate)")
        
        // Îü¨Îãù ÏõåÌÅ¨ÏïÑÏõÉ + ÎÇ†Ïßú Î≤îÏúÑ Ï°∞Í±¥
        let workoutPredicate = HKQuery.predicateForWorkouts(with: .running)
        let datePredicate = HKQuery.predicateForSamples(withStart: startDate, end: endDate, options: [])
        let combinedPredicate = NSCompoundPredicate(andPredicateWithSubpredicates: [workoutPredicate, datePredicate])
        
        let sortDescriptor = NSSortDescriptor(key: HKSampleSortIdentifierEndDate, ascending: false)
        
        // limitÏùÑ HKObjectQueryNoLimitÏúºÎ°ú ÏÑ§Ï†ïÌïòÏó¨ Î™®Îì† Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        let query = HKSampleQuery(
            sampleType: HKObjectType.workoutType(),
            predicate: combinedPredicate,
            limit: HKObjectQueryNoLimit,
            sortDescriptors: [sortDescriptor]
        ) { _, samples, error in
            if let error = error {
                print("‚ùå Error fetching workouts: \(error)")
                DispatchQueue.main.async {
                    completion([])
                }
                return
            }
            
            let workouts = samples as? [HKWorkout] ?? []
            print("‚úÖ Found \(workouts.count) workouts in the last \(monthsBack) months")
            
            DispatchQueue.main.async {
                completion(workouts)
            }
        }
        
        healthStore.execute(query)
    }
    
    // MARK: - Helper Methods
    
    /// ÌïúÍµ≠ ÏãúÍ∞ÑÏúºÎ°ú Ìè¨Îß∑ÌåÖ
    private func formatKoreanTime(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        formatter.timeZone = TimeZone(identifier: "Asia/Seoul")
        return formatter.string(from: date) + " (KST)"
    }
    
    // ÏõåÌÅ¨ÏïÑÏõÉ ÎÇ¥ Ïã¨Î∞ïÏàò ÏÉòÌîå Í∞ÄÏ†∏Ïò§Í∏∞
    func fetchHeartRates(for workout: HKWorkout, completion: @escaping ([HKQuantitySample]) -> Void) {
        let heartRateType = HKQuantityType.quantityType(forIdentifier: .heartRate)!
        let predicate = HKQuery.predicateForSamples(withStart: workout.startDate, end: workout.endDate, options: .strictStartDate)
        let query = HKSampleQuery(sampleType: heartRateType, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { _, samples, _ in
            let heartRates = samples as? [HKQuantitySample] ?? []
            DispatchQueue.main.async {
                completion(heartRates)
            }
        }
        healthStore.execute(query)
    }
    
    // ÏõåÌÅ¨ÏïÑÏõÉ Í≤ΩÎ°ú(HKWorkoutRoute)ÏóêÏÑú ÏúÑÏπò Ï†ïÎ≥¥ÏôÄ ÎàÑÏ†Å Í±∞Î¶¨ Ï∂îÏ∂ú
    func fetchRouteLocations(for workout: HKWorkout, completion: @escaping ([RunningLocationPoint]) -> Void) {
        let routeType = HKSeriesType.workoutRoute()
        let routePredicate = HKQuery.predicateForObjects(from: workout)
        let routeQuery = HKSampleQuery(sampleType: routeType, predicate: routePredicate, limit: 1, sortDescriptors: nil) { [weak self] _, routeSamples, error in
            print("üîç Route query result: \(routeSamples?.count ?? 0) routes found")
            if let error = error {
                print("‚ùå Route query error: \(error)")
            }
            
            guard let route = (routeSamples as? [HKWorkoutRoute])?.first else {
                print("‚ö†Ô∏è No route found for workout")
                DispatchQueue.main.async { completion([]) }
                return
            }
            
            print("‚úÖ Route found, fetching locations...")
            var allLocations: [CLLocation] = []
            let locationsQuery = HKWorkoutRouteQuery(route: route) { _, locations, done, error in
                if let error = error {
                    print("‚ùå Location query error: \(error)")
                }
                
                if let locations = locations {
                    print("üìç Found \(locations.count) locations")
                    allLocations.append(contentsOf: locations)
                }
                
                if done {
                    print("‚úÖ Location query completed, total locations: \(allLocations.count)")
                    // ÏúÑÏπò Ìè¨Ïù∏Ìä∏ ÏÉùÏÑ±
                    var points: [RunningLocationPoint] = []
                    for loc in allLocations {
                        points.append(RunningLocationPoint(
                            latitude: loc.coordinate.latitude,
                            longitude: loc.coordinate.longitude,
                            timestamp: loc.timestamp,
                            cumulativeDistance: 0
                        ))
                    }
                    print("üéØ Created \(points.count) route points")
                    DispatchQueue.main.async {
                        completion(points)
                    }
                }
            }
            self?.healthStore.execute(locationsQuery)
        }
        healthStore.execute(routeQuery)
    }
    
    // ÏõåÌÅ¨ÏïÑÏõÉÏùò Î™®Îì† HealthKit Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Î©îÏÑúÎìú
    func fetchCompleteWorkoutData(for workout: HKWorkout, completion: @escaping (WorkoutDetailedData) -> Void) {
        var detailedData = WorkoutDetailedData(workout: workout)
        
        let group = DispatchGroup()
        
        // 1. Ïã¨Î∞ïÏàò Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        group.enter()
        fetchHeartRates(for: workout) { heartRates in
            detailedData.heartRates = heartRates
            group.leave()
        }
        
        // 2. Í≤ΩÎ°ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        group.enter()
        fetchRouteLocations(for: workout) { routePoints in
            detailedData.routePoints = routePoints
            group.leave()
        }
        
        // 3. Ïä§ÌÖù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        group.enter()
        fetchSteps(for: workout) { steps in
            detailedData.steps = steps
            group.leave()
        }
        
        // 4. ÏπºÎ°úÎ¶¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        group.enter()
        fetchCalories(for: workout) { calories in
            detailedData.calories = calories
            group.leave()
        }
        
        // 5. ÏÜçÎèÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        group.enter()
        fetchSpeed(for: workout) { speed in
            detailedData.speed = speed
            group.leave()
        }
        
        group.notify(queue: .main) {
            completion(detailedData)
        }
    }
    
    // Ïä§ÌÖù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    private func fetchSteps(for workout: HKWorkout, completion: @escaping ([HKQuantitySample]) -> Void) {
        let stepType = HKQuantityType.quantityType(forIdentifier: .stepCount)!
        let predicate = HKQuery.predicateForSamples(withStart: workout.startDate, end: workout.endDate, options: .strictStartDate)
        let query = HKSampleQuery(sampleType: stepType, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { _, samples, _ in
            let steps = samples as? [HKQuantitySample] ?? []
            DispatchQueue.main.async {
                completion(steps)
            }
        }
        healthStore.execute(query)
    }
    
    // ÏπºÎ°úÎ¶¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    private func fetchCalories(for workout: HKWorkout, completion: @escaping ([HKQuantitySample]) -> Void) {
        let calorieType = HKQuantityType.quantityType(forIdentifier: .activeEnergyBurned)!
        let predicate = HKQuery.predicateForSamples(withStart: workout.startDate, end: workout.endDate, options: .strictStartDate)
        let query = HKSampleQuery(sampleType: calorieType, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { _, samples, _ in
            let calories = samples as? [HKQuantitySample] ?? []
            DispatchQueue.main.async {
                completion(calories)
            }
        }
        healthStore.execute(query)
    }
    
    // ÏÜçÎèÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (Îü¨Îãù ÏÜçÎèÑ + Í±∑Í∏∞ ÏÜçÎèÑ)
    private func fetchSpeed(for workout: HKWorkout, completion: @escaping ([HKQuantitySample]) -> Void) {
        var allSpeedSamples: [HKQuantitySample] = []
        let group = DispatchGroup()
        
        // Îü¨Îãù ÏÜçÎèÑ
        if let runningSpeedType = HKQuantityType.quantityType(forIdentifier: .runningSpeed) {
            group.enter()
            let runningPredicate = HKQuery.predicateForSamples(withStart: workout.startDate, end: workout.endDate, options: .strictStartDate)
            let runningQuery = HKSampleQuery(sampleType: runningSpeedType, predicate: runningPredicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { _, samples, _ in
                if let samples = samples as? [HKQuantitySample] {
                    allSpeedSamples.append(contentsOf: samples)
                }
                group.leave()
            }
            healthStore.execute(runningQuery)
        }
        
        // Í±∑Í∏∞ ÏÜçÎèÑ
        if let walkingSpeedType = HKQuantityType.quantityType(forIdentifier: .walkingSpeed) {
            group.enter()
            let walkingPredicate = HKQuery.predicateForSamples(withStart: workout.startDate, end: workout.endDate, options: .strictStartDate)
            let walkingQuery = HKSampleQuery(sampleType: walkingSpeedType, predicate: walkingPredicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { _, samples, _ in
                if let samples = samples as? [HKQuantitySample] {
                    allSpeedSamples.append(contentsOf: samples)
                }
                group.leave()
            }
            healthStore.execute(walkingQuery)
        }
        
        group.notify(queue: .main) {
            completion(allSpeedSamples)
        }
    }
} 